{"version":3,"sources":["components/Environment/index.js"],"names":["Environment","props","state","hidden","serverValue","server","enabledValue","enabled","onServerChange","setState","e","currentTarget","value","onToggleEnabled","onOk","onSetData","toggleEnv","onCancel","window","nextProps","root","label","onClick","disabled","placement","content","propTypes","string","isRequired","bool","func"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport styles from './styles.scss';\n\nimport Header from '../Header';\nimport Panel from '../Panel';\nimport Line from '../Line';\nimport IconLine from '../IconLine';\nimport TextInput from '../TextInput';\nimport Switch from '../Switch';\n\n\n/**\n * Environment component for switching api server. Intended only for testing.\n * This component current does not comply to use redux properly.\n */\n\nclass Environment extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hidden: true,\n      serverValue: props.server,\n      enabledValue: props.enabled,\n    };\n\n    this.onServerChange = e => {\n      this.setState({\n        serverValue: e.currentTarget.value,\n      });\n    };\n    this.onToggleEnabled = e => {\n      this.setState({\n        enabledValue: !this.state.enabledValue,\n      });\n    };\n    this.onOk = () => {\n      this.props.onSetData({\n        server: this.state.serverValue,\n        enabled: this.state.enabledValue,\n      });\n      this.toggleEnv();\n    };\n    this.onCancel = () => {\n      this.setState({\n        serverValue: this.props.server,\n        enabledValue: this.props.enabled,\n      });\n      this.toggleEnv();\n    };\n    this.toggleEnv = () => {\n      this.setState({\n        hidden: !this.state.hidden,\n      });\n    };\n    if (typeof window !== 'undefined') {\n      window.toggleEnv = this.toggleEnv;\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.server !== this.props.server) {\n      this.setState({\n        serverValue: nextProps.server,\n      });\n    }\n    if (nextProps.enabled !== this.props.enabled) {\n      this.setState({\n        enabledValue: nextProps.enabled,\n      });\n    }\n  }\n  render() {\n    if (this.state.hidden) {\n      return null;\n    }\n    return (\n      <div className={styles.root}>\n        <Header\n          buttons={[\n            {\n              label: <i className=\"fa fa-times\" />,\n              onClick: this.onCancel,\n            },\n            {\n              label: <i className=\"fa fa-save\" />,\n              onClick: this.onOk,\n              disabled: (\n                this.state.serverValue === this.props.server &&\n                this.state.enabledValue === this.props.enabled\n              ),\n              placement: 'right',\n            },\n          ]}\n        >Environment</Header>\n        <Panel classname={styles.content}>\n          <Line>\n            Server\n            <TextInput\n              value={this.state.serverValue}\n              onChange={this.onServerChange}\n            />\n          </Line>\n          <IconLine\n            icon={\n              <Switch\n                checked={this.state.enabledValue}\n                onChange={this.onToggleEnabled}\n              />\n            }\n          >\n            Enable\n          </IconLine>\n\n        </Panel>\n      </div>\n    );\n  }\n}\n\nEnvironment.propTypes = {\n  server: PropTypes.string.isRequired,\n  enabled: PropTypes.bool.isRequired,\n  onSetData: PropTypes.func.isRequired,\n};\n\nexport default Environment;\n"]}