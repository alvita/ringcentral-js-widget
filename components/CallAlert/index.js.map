{"version":3,"sources":["components/CallAlert/index.js"],"names":["CallAlert","message","regionSettingsUrl","currentLocale","noAreaCode","areaCode","getString","areaCodeLink","propTypes","string","isRequired","shape","handleMessage","noToNumber","specialNumber","connectFailed","internalError","notAnExtension","networkError","noRingoutEnable"],"mappings":";;;;;kBAMwBA,S;;AANxB;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEe,SAASA,SAAT,OAMZ;AAAA,MAJCC,OAID,QALDA,OAKC,CAJCA,OAID;AAAA,MAFDC,iBAEC,QAFDA,iBAEC;AAAA,MADDC,aACC,QADDA,aACC;;AACD,MAAIF,YAAY,qBAAWG,UAA3B,EAAuC;AACrC,QAAMC,WAAW,eAAKC,SAAL,CAAe,UAAf,EAA2BH,aAA3B,CAAjB;AACA,WACE;AACE,eAAS,eAAKG,SAAL,CAAeL,OAAf,EAAwBE,aAAxB,CADX;AAEE,cAAQ,EAAEI,cAAc;AAAA;AAAA,YAAM,IAAIL,iBAAV;AAA8BG;AAA9B,SAAhB,EAFV,GADF;AAKD;AACD,SACE;AAAA;AAAA;AAAO,mBAAKC,SAAL,CAAeL,OAAf,EAAwBE,aAAxB;AAAP,GADF;AAGD;;AAEDH,UAAUQ,SAAV,GAAsB;AACpBN,qBAAmB,iBAAUO,MAAV,CAAiBC,UADhB;AAEpBT,WAAS,iBAAUU,KAAV,CAAgB;AACvBV,aAAS,iBAAUQ,MAAV,CAAiBC;AADH,GAAhB,EAENA,UAJiB;AAKpBP,iBAAe,iBAAUM,MAAV,CAAiBC;AALZ,CAAtB;;AAQAV,UAAUY,aAAV,GAA0B;AAAA,MAAGX,OAAH,SAAGA,OAAH;AAAA,SACxBA,YAAY,qBAAWY,UAAvB,IACAZ,YAAY,qBAAWG,UADvB,IAEAH,YAAY,qBAAWa,aAFvB,IAGAb,YAAY,qBAAWc,aAHvB,IAIAd,YAAY,qBAAWe,aAJvB,IAKAf,YAAY,qBAAWgB,cALvB,IAMAhB,YAAY,qBAAWiB,YANvB,IAOAjB,YAAY,qBAAWkB,eARC;AAAA,CAA1B","file":"index.js","sourcesContent":["import React, { PropTypes } from 'react';\nimport { Link } from 'react-router';\nimport callErrors from 'ringcentral-integration/modules/Call/callErrors';\nimport FormattedMessage from '../FormattedMessage';\nimport i18n from './i18n';\n\nexport default function CallAlert({\n  message: {\n    message,\n  },\n  regionSettingsUrl,\n  currentLocale,\n}) {\n  if (message === callErrors.noAreaCode) {\n    const areaCode = i18n.getString('areaCode', currentLocale);\n    return (\n      <FormattedMessage\n        message={i18n.getString(message, currentLocale)}\n        values={{ areaCodeLink: <Link to={regionSettingsUrl}>{areaCode}</Link> }} />\n    );\n  }\n  return (\n    <span>{i18n.getString(message, currentLocale)}</span>\n  );\n}\n\nCallAlert.propTypes = {\n  regionSettingsUrl: PropTypes.string.isRequired,\n  message: PropTypes.shape({\n    message: PropTypes.string.isRequired,\n  }).isRequired,\n  currentLocale: PropTypes.string.isRequired,\n};\n\nCallAlert.handleMessage = ({ message }) => (\n  message === callErrors.noToNumber ||\n  message === callErrors.noAreaCode ||\n  message === callErrors.specialNumber ||\n  message === callErrors.connectFailed ||\n  message === callErrors.internalError ||\n  message === callErrors.notAnExtension ||\n  message === callErrors.networkError ||\n  message === callErrors.noRingoutEnable\n);\n"]}