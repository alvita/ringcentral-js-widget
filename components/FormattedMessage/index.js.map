{"version":3,"sources":["components/FormattedMessage/index.js"],"names":["FormattedMessage","message","values","tagName","uid","Math","floor","random","toString","hashedParams","elements","tokenDelimeter","forEach","key","nodes","split","filter","token","map","propTypes","string","isRequired","object"],"mappings":";;;;;;;;;;;;;;kBAGwBA,gB;;AAHxB;;AACA;;;;;;AAEe,SAASA,gBAAT,OAAiE;AAAA,MAArCC,OAAqC,QAArCA,OAAqC;AAAA,MAA5BC,MAA4B,QAA5BA,MAA4B;AAAA,0BAApBC,OAAoB;AAAA,MAApBA,OAAoB,gCAAV,MAAU;;AAC9E,MAAMC,MAAMC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,aAA3B,EAA0CC,QAA1C,CAAmD,EAAnD,CAAZ;AACA,MAAMC,eAAe,EAArB;AACA,MAAMC,WAAW,EAAjB;AACA,MAAMC,yBAAuBP,GAAvB,QAAN;;AAEA,sBAAYF,MAAZ,EAAoBU,OAApB,CAA4B,UAACC,GAAD,EAAS;AACnC,QAAI,2BAAeX,OAAOW,GAAP,CAAf,CAAJ,EAAiC;AAC/BJ,mBAAaI,GAAb,SAAuBF,cAAvB,GAAwCE,GAAxC,GAA8CF,cAA9C;AACAD,eAASG,GAAT,IAAgBX,OAAOW,GAAP,CAAhB;AACD,KAHD,MAGO;AACLJ,mBAAaI,GAAb,IAAoBX,OAAOW,GAAP,CAApB;AACD;AACF,GAPD;;AASA,MAAMC,QAAQ,6BAAOb,OAAP,EAAgBQ,YAAhB,EACXM,KADW,CACLJ,cADK,EAEXK,MAFW,CAEJ;AAAA,WAAS,CAAC,CAACC,KAAX;AAAA,GAFI,EAGXC,GAHW,CAGP;AAAA,WAASR,SAASO,KAAT,KAAmBA,KAA5B;AAAA,GAHO,CAAd;AAIA,SAAO,uCAAcd,OAAd,EAAuB,IAAvB,0CAAgCW,KAAhC,GAAP;AACD;;AAEDd,iBAAiBmB,SAAjB,GAA6B;AAC3BlB,WAAS,iBAAUmB,MAAV,CAAiBC,UADC;AAE3BnB,UAAQ,iBAAUoB,MAFS;AAG3BnB,WAAS,iBAAUiB;AAHQ,CAA7B","file":"index.js","sourcesContent":["import { createElement, isValidElement, PropTypes } from 'react';\nimport format from 'format-message';\n\nexport default function FormattedMessage({ message, values, tagName = 'span' }) {\n  const uid = Math.floor(Math.random() * 0x10000000000).toString(16);\n  const hashedParams = {};\n  const elements = {};\n  const tokenDelimeter = `@__${uid}__@`;\n\n  Object.keys(values).forEach((key) => {\n    if (isValidElement(values[key])) {\n      hashedParams[key] = `${tokenDelimeter}${key}${tokenDelimeter}`;\n      elements[key] = values[key];\n    } else {\n      hashedParams[key] = values[key];\n    }\n  });\n\n  const nodes = format(message, hashedParams)\n    .split(tokenDelimeter)\n    .filter(token => !!token)\n    .map(token => elements[token] || token);\n  return createElement(tagName, null, ...nodes);\n}\n\nFormattedMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n  values: PropTypes.object,\n  tagName: PropTypes.string,\n};\n"]}