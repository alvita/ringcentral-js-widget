{"version":3,"sources":["containers/SettingsPage/index.js"],"names":["mapToProps","_","accountInfo","auth","brand","callingSettingsUrl","extensionInfo","locale","regionSettings","regionSettingsUrl","version","loggedIn","loginStatus","loginNumber","ready","phoneNumber","mainCompanyNumber","extensionNumber","countryCode","areaCode","showRegion","id","availableCountries","length","find","c","isoCode","currentLocale","brandId","mapToFunctions","onLogoutButtonClick","logout","SettingsPage","propTypes","instanceOf","isRequired","string","default"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,SAASA,UAAT,CAAoBC,CAApB,QAUG;AAAA,MATDC,WASC,QATDA,WASC;AAAA,MARDC,IAQC,QARDA,IAQC;AAAA,MAPDC,KAOC,QAPDA,KAOC;AAAA,MANDC,kBAMC,QANDA,kBAMC;AAAA,MALDC,aAKC,QALDA,aAKC;AAAA,MAJDC,MAIC,QAJDA,MAIC;AAAA,MAHDC,cAGC,QAHDA,cAGC;AAAA,MAFDC,iBAEC,QAFDA,iBAEC;AAAA,MADDC,OACC,QADDA,OACC;;AACD,MAAMC,WAAWR,KAAKS,WAAL,KAAqB,sBAAYD,QAAlD;AACA,MAAME,cAAeF,YACnBT,YAAYY,KADO,IAEnBR,cAAcQ,KAFI,GAIlB,4BAAa;AACXC,iBACEb,YAAYc,iBADd,SAEIV,cAAcW,eAHP;AAIXC,iBAAaV,eAAeU,WAJjB;AAKXC,cAAUX,eAAeW;AALd,GAAb,CAJkB,GAWlB,EAXF;AAYA,SAAO;AACLC,gBAAYT,YAAYP,MAAMiB,EAAN,KAAa,MAAzB,KACVb,eAAec,kBAAf,CAAkCC,MAAlC,GAA2C,CAA3C,IACA,CAAC,CAACf,eAAec,kBAAf,CAAkCE,IAAlC,CAAuC;AAAA,aAAKC,EAAEC,OAAF,KAAc,IAAnB;AAAA,KAAvC,CADF,IAEA,CAAC,CAAClB,eAAec,kBAAf,CAAkCE,IAAlC,CAAuC;AAAA,aAAKC,EAAEC,OAAF,KAAc,IAAnB;AAAA,KAAvC,CAHQ,CADP;AAMLb,4BANK;AAOLH,oBAPK;AAQLiB,mBAAepB,OAAOoB,aARjB;AASLC,aAASxB,MAAMiB,EATV;AAULhB,0CAVK;AAWLI;AAXK,GAAP;AAaD;;AAED,SAASoB,cAAT,CAAwB5B,CAAxB,SAEG;AAAA;;AAAA,MADDE,IACC,SADDA,IACC;;AACD,SAAO;AACL2B;AAAA,6EAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACb3B,KAAK4B,MAAL,EADa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAArB;;AAAA;AAAA;AAAA;AAAA;AADK,GAAP;AAKD;AACD,IAAMC,eAAe,yBACnBhC,UADmB,EAEnB6B,cAFmB,0BAArB;;AAKA,IAAMI,YAAY;AAChB/B,eAAa,iBAAUgC,UAAV,wBAAkCC,UAD/B;AAEhBhC,QAAM,iBAAU+B,UAAV,iBAA2BC,UAFjB;AAGhB/B,SAAO,iBAAU8B,UAAV,kBAA4BC,UAHnB;AAIhB7B,iBAAe,iBAAU4B,UAAV,0BAAoCC,UAJnC;AAKhB5B,UAAQ,iBAAU2B,UAAV,mBAA6BC,UALrB;AAMhB3B,kBAAgB,iBAAU0B,UAAV,2BAAqCC,UANrC;AAOhB9B,sBAAoB,iBAAU+B,MAAV,CAAiBD,UAPrB;AAQhB1B,qBAAmB,iBAAU2B,MAAV,CAAiBD,UARpB;AAShBzB,WAAS,iBAAU0B,MAAV,CAAiBD;AATV,CAAlB;;AAYAH,aAAaC,SAAb,GAAyBA,SAAzB;;QAGEJ,c,GAAAA,c;QACA7B,U,GAAAA,U;QACAiC,S,GAAAA,S;QACgBI,O,GAAhBL,Y","file":"index.js","sourcesContent":["import { PropTypes } from 'react';\nimport { connect } from 'react-redux';\nimport loginStatus from 'ringcentral-integration/modules/Auth/loginStatus';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport AccountInfo from 'ringcentral-integration/modules/AccountInfo';\nimport Auth from 'ringcentral-integration/modules/Auth';\nimport Brand from 'ringcentral-integration/modules/Brand';\nimport ExtensionInfo from 'ringcentral-integration/modules/ExtensionInfo';\nimport Locale from 'ringcentral-integration/modules/Locale';\nimport RegionSettings from 'ringcentral-integration/modules/RegionSettings';\n\nimport SettingsPanel from '../../components/SettingsPanel';\n\nfunction mapToProps(_, {\n  accountInfo,\n  auth,\n  brand,\n  callingSettingsUrl,\n  extensionInfo,\n  locale,\n  regionSettings,\n  regionSettingsUrl,\n  version,\n}) {\n  const loggedIn = auth.loginStatus === loginStatus.loggedIn;\n  const loginNumber = (loggedIn &&\n    accountInfo.ready &&\n    extensionInfo.ready\n  ) ?\n    formatNumber({\n      phoneNumber: `${\n        accountInfo.mainCompanyNumber\n      }*${extensionInfo.extensionNumber}`,\n      countryCode: regionSettings.countryCode,\n      areaCode: regionSettings.areaCode,\n    }) :\n    '';\n  return {\n    showRegion: loggedIn && brand.id === '1210' && (\n      regionSettings.availableCountries.length > 1 ||\n      !!regionSettings.availableCountries.find(c => c.isoCode === 'US') ||\n      !!regionSettings.availableCountries.find(c => c.isoCode === 'CA')\n    ),\n    loginNumber,\n    version,\n    currentLocale: locale.currentLocale,\n    brandId: brand.id,\n    callingSettingsUrl,\n    regionSettingsUrl,\n  };\n}\n\nfunction mapToFunctions(_, {\n  auth,\n}) {\n  return {\n    onLogoutButtonClick: async () => {\n      await auth.logout();\n    },\n  };\n}\nconst SettingsPage = connect(\n  mapToProps,\n  mapToFunctions,\n)(SettingsPanel);\n\nconst propTypes = {\n  accountInfo: PropTypes.instanceOf(AccountInfo).isRequired,\n  auth: PropTypes.instanceOf(Auth).isRequired,\n  brand: PropTypes.instanceOf(Brand).isRequired,\n  extensionInfo: PropTypes.instanceOf(ExtensionInfo).isRequired,\n  locale: PropTypes.instanceOf(Locale).isRequired,\n  regionSettings: PropTypes.instanceOf(RegionSettings).isRequired,\n  callingSettingsUrl: PropTypes.string.isRequired,\n  regionSettingsUrl: PropTypes.string.isRequired,\n  version: PropTypes.string.isRequired,\n};\n\nSettingsPage.propTypes = propTypes;\n\nexport {\n  mapToFunctions,\n  mapToProps,\n  propTypes,\n  SettingsPage as default,\n};\n"]}